read in-dev? from ENV var (maybe environ)

split everything in to namespaces.

replace atoms with agents (async)

multimethods to replace case statements to dispatch event to handler functions.

add timbre logging lib

tea-time scheduler to spawn new objects, e.g. coins

store sockets in atom with tag (e.g. player or display) and id. So we can send messages
to a socket, or multiple sockets with the same tag in a generic way. This would be most useful if we wanted
to support multiple display, as at the moment it works just fine with two channels (player and display).
Or when we need to send events to a specific player.

Handle display screen reloading, i.e. when display connects if there are any players send them all.
^ will not work, we don't know their x,y... (unless we keep sending it back to the server for this purpose.)

Do we need to handle loosing WS connection, i.e. attempt to reconnect every X seconds? This might be especially useful
when using a poor connection, e.g. 3G or Wifi.

static assets are served via http-kit, this is okay for local dev, but on server Apache (or whatever) should serve these.
they also do not have caching headers. Ideally we also add digest. But this can come later.
However apache will not be able to see inside jar, so instead http-kit can serve and apache can cache.



display should report its size to server so it can set world size (used for rand x,y of new players)

namespace game (join + display) so we can have multiple games

## Tag game

when more than one player joined randomly choose "it"

add points (increase while not "it")
decrease points while "it" until zero
points done on server side and pushed to mobile devices

detect collision between players
  it x,y is within another players x,y + height/width (i.e bounding box)
  collision with "it" changes "it" to other player
push points to mobile device

game lasts for X mins, player with most points at end wins.





